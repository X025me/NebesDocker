{"version":3,"sources":["views/result/Request/index.js"],"names":["Option","Select","formItemLayout","labelCol","xs","span","sm","wrapperCol","Index","useState","loading","setLoading","title","setTitle","active","setActive","objects","setObjects","setError","objectsid","setObjectsid","objtype","setObjType","description","setDescription","account","useSelector","state","style","textAlign","Item","label","hasFeedback","allowClear","onSelect","e","value","axios","get","API_SERVER1","headers","Authorization","token","then","response","console","log","data","catch","error","validateStatus","length","map","item","index","id","result","general","rcconstituency","regionalconstituencyname","color","hoprconstituency","constituencyname","constituency","name","rules","required","message","TextArea","showCount","maxLength","onChange","target","justifyContent","marginLeft","onClick","post","object_id","content_type","request_description","notification","open","className","width","window","location","reload","type","htmlType"],"mappings":"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","file":"static/js/33.a62e8cb0.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { SmileOutlined } from '@ant-design/icons';\nimport { Form, Input, Spin, Select, Button, notification  } from 'antd';\nimport { useSelector } from 'react-redux';\nimport { API_SERVER1 } from '../../../config/constant';\nimport axios from 'axios';\n\nconst { Option } = Select;\n\nconst formItemLayout = {\n    labelCol: {\n        xs: { span: 24 },\n        sm: { span: 6 }\n    },\n    wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 14 }\n    }\n};\n\nexport default function Index() {\n    const [model, setModel] = useState('');\n    const [loading, setLoading] = useState(false);\n    const [title, setTitle] = useState('');\n    const [active, setActive] = useState(false);\n    const [objects, setObjects] = useState([]);\n    const [error, setError] = useState(false);\n    const [objectsid, setObjectsid] = useState(0);\n    const [objtype, setObjType] = useState('');\n    const [description, setDescription] = useState('');\n    const [pageactivate, setpageactivate] = useState(false);\n    const account = useSelector((state) => state.account);\n    const openNotification = () => {\n      notification.open({\n        message: 'Success',\n        description:\n          \"Your Request Has been sent, Thank You\",\n        className: 'custom-class',\n        style: {\n          width: 600,\n        },\n      });\n    };\n\n    const request = () => {\n        axios\n            .post(API_SERVER1 + `data/requests/request_change/${objtype}`, {\n                object_id: objectsid,\n                content_type: objtype,\n                request_description: description\n            }, { headers: { Authorization: `${account.token}` } })\n            .then(function (response) {\n              notification.open({\n                message: 'Success',\n                description:\n                  \"Thank You\",\n                className: 'custom-class',\n                style: {\n                  width: 600,\n                },\n              });\n              window.location.reload()\n              \n            })\n            .catch(function (error) {\n              notification.open({\n                message: 'Fail',\n                description:\n                  \"We couldnt accept your request, please check your internet connection and make sure all required forms are filled\",\n                className: 'custom-class',\n                style: {\n                  width: 600,\n                },\n              });\n            });\n    };\n\n    const getSelectedModelData = (value) => {\n        setLoading(true);\n        setObjType(value);\n        axios\n            .get(API_SERVER1 + `data/requests/request_change/${value}`, { headers: { Authorization: `${account.token}` } })\n            .then(function (response) {\n                console.log(response);\n                setActive(true);\n                setLoading(false);\n                setObjects(response.data);\n            })\n            .catch(function (error) {\n                setLoading(false);\n                setError(true);\n            });\n    };\n    const onSelectModel = (e) => {\n        if (e == 'newvotehoprgeneral' || e == 'newvotehopresult' || e == 'newvotehoprmax') {\n            setTitle('House of Peoples Representative');\n        } else if (e == 'newvotercgeneral' || e == 'newvotercresult' || e == 'newvotercmax') {\n            setTitle('Regional Constituency ');\n        }\n\n        getSelectedModelData(e);\n    };\n    return (\n        <div>\n            <h3 style={{ textAlign: 'center' }}>Change Request Form</h3>\n            <Form {...formItemLayout}>\n                <Form.Item label=\"Data Source\" hasFeedback>\n                    <Select allowClear onSelect={onSelectModel}>\n                        <Option value=\"newvotehoprgeneral\">HOPR General Data</Option>\n                        <Option value=\"newvotehopresult\">HOPR Candidate Result Data</Option>\n                        <Option value=\"newvotehoprmax\">HOPR Winner Data</Option>\n                        <Option value=\"newvotercgeneral\">RC General Data</Option>\n                        <Option value=\"newvotercresult\">RC Candidate Result Data</Option>\n                        <Option value=\"newvotercmax\">RC Winner Data</Option>\n                    </Select>\n                </Form.Item>\n                {objtype == 'newvotercmax' ? (\n                    <>\n                        {active ? (\n                            <Form.Item label={title} validateStatus=\"warning\">\n                                {!objects.length ? (\n                                    <p style={{ color: 'red' }}>Error Loading Data, please check your connection and refresh the page</p>\n                                ) : (\n                                    <Select onSelect={(e) => setObjectsid(e)}>\n                                        {objects.map((item, index) => (\n                                            <Option key={index} value={item.id}>\n                                                {item.result.general.rcconstituency.regionalconstituencyname}\n                                            </Option>\n                                        ))}\n                                    </Select>\n                                )}\n                            </Form.Item>\n                        ) : (\n                            <div>{loading ? <Spin /> : null}</div>\n                        )}{' '}\n                    </>\n                ) : null}\n                {objtype == 'newvotercresult' ? (\n                    <>\n                        {active ? (\n                            <Form.Item label={title} validateStatus=\"warning\">\n                                {!objects.length ? (\n                                    <p style={{ color: 'red' }}>Error Loading Data, please check your connection and refresh the page</p>\n                                ) : (\n                                    <Select onSelect={(e) => setObjectsid(e)}>\n                                        {objects.map((item, index) => (\n                                            <Option key={index} value={item.id}>\n                                                {item.rcconstituency.regionalconstituencyname}\n                                            </Option>\n                                        ))}\n                                    </Select>\n                                )}\n                            </Form.Item>\n                        ) : (\n                            <div>{loading ? <Spin /> : null}</div>\n                        )}{' '}\n                    </>\n                ) : null}\n                {objtype == 'newvotercgeneral' ? (\n                    <>\n                        {active ? (\n                            <Form.Item label={title} validateStatus=\"warning\">\n                                {!objects.length ? (\n                                    <p style={{ color: 'red' }}>Error Loading Data, please check your connection and refresh the page</p>\n                                ) : (\n                                    <Select onSelect={(e) => setObjectsid(e)}>\n                                        {objects.map((item, index) => (\n                                            <Option key={index} value={item.id}>\n                                                {item.rcconstituency.regionalconstituencyname}\n                                            </Option>\n                                        ))}\n                                    </Select>\n                                )}\n                            </Form.Item>\n                        ) : (\n                            <div>{loading ? <Spin /> : null}</div>\n                        )}{' '}\n                    </>\n                ) : null}\n                {objtype == 'newvotehopresult' ? (\n                    <>\n                        {active ? (\n                            <Form.Item label={title} validateStatus=\"warning\">\n                                {!objects.length ? (\n                                    <p style={{ color: 'red' }}>Error Loading Data, please check your connection and refresh the page</p>\n                                ) : (\n                                    <Select onSelect={(e) => setObjectsid(e)}>\n                                        {objects.map((item, index) => (\n                                            <Option key={index} value={item.id}>\n                                                {item.general.hoprconstituency.constituencyname}\n                                            </Option>\n                                        ))}\n                                    </Select>\n                                )}\n                            </Form.Item>\n                        ) : (\n                            <div>{loading ? <Spin /> : null}</div>\n                        )}{' '}\n                    </>\n                ) : null}\n\n                {objtype == 'newvotehoprmax' ? (\n                    <>\n                        {active ? (\n                            <Form.Item label={title} validateStatus=\"warning\">\n                                {!objects.length ? (\n                                    <p style={{ color: 'red' }}>Error Loading Data, please check your connection and refresh the page</p>\n                                ) : (\n                                    <Select onSelect={(e) => setObjectsid(e)}>\n                                        {objects.map((item, index) => (\n                                            <Option key={index} value={item.id}>\n                                                {item.constituency.name}\n                                            </Option>\n                                        ))}\n                                    </Select>\n                                )}\n                            </Form.Item>\n                        ) : (\n                            <div>{loading ? <Spin /> : null}</div>\n                        )}{' '}\n                    </>\n                ) : null}\n                {objtype == 'newvotehoprgeneral' ? (\n                    <>\n                        {active ? (\n                            <Form.Item label={title} validateStatus=\"warning\">\n                                {!objects.length ? (\n                                    <p style={{ color: 'red' }}>Error Loading Data, please check your connection and refresh the page</p>\n                                ) : (\n                                    <Select onSelect={(e) => setObjectsid(e)}>\n                                        {objects.map((item, index) => (\n                                            <Option key={index} value={item.id}>\n                                                {item.hoprconstituency.constituencyname}\n                                            </Option>\n                                        ))}\n                                    </Select>\n                                )}\n                            </Form.Item>\n                        ) : (\n                            <div>{loading ? <Spin /> : null}</div>\n                        )}{' '}\n                    </>\n                ) : null}\n                <Form.Item name=\"Description\" label=\"Description\" rules={[{ required: true, message: 'Please input Description' }]}>\n                    <Input.TextArea showCount maxLength={100} onChange={(e) => setDescription(e.target.value)} />\n                </Form.Item>\n                <Form.Item style={{ justifyContent: 'right', marginLeft: '62%' }}>\n                    <Button onClick={request} type=\"primary\" htmlType=\"submit\">\n                        Send\n                    </Button>\n                </Form.Item>\n            </Form>\n        </div>\n    );\n}\n"],"sourceRoot":""}