{"ast":null,"code":"var _jsxFileName = \"/Users/johndoe/Nebe-data-vistualization/src/layouts/AdminLayout/Navigation/NavContent/NavCollapse/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect } from 'react';\nimport { ListGroup } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport NavItem from '../NavItem';\nimport LoopNavCollapse from './index';\nimport NavIcon from '../NavIcon';\nimport NavBadge from '../NavBadge';\nimport { ConfigContext } from '../../../../../contexts/ConfigContext';\nimport * as actionType from '../../../../../store/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NavCollapse = ({\n  collapse,\n  type\n}) => {\n  _s();\n\n  const configContext = useContext(ConfigContext);\n  const {\n    dispatch\n  } = configContext;\n  const {\n    isOpen,\n    isTrigger\n  } = configContext.state;\n  useEffect(() => {\n    const currentIndex = document.location.pathname.toString().split('/').findIndex(id => id === collapse.id);\n\n    if (currentIndex > -1) {\n      dispatch({\n        type: actionType.COLLAPSE_TOGGLE,\n        menu: {\n          id: collapse.id,\n          type: type\n        }\n      });\n    }\n  }, [collapse, dispatch, type]);\n  let navItems = '';\n\n  if (collapse.children) {\n    const collapses = collapse.children;\n    navItems = Object.keys(collapses).map(item => {\n      item = collapses[item];\n\n      switch (item.type) {\n        case 'collapse':\n          return /*#__PURE__*/_jsxDEV(LoopNavCollapse, {\n            collapse: item,\n            type: \"sub\"\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 28\n          }, this);\n\n        case 'item':\n          return /*#__PURE__*/_jsxDEV(NavItem, {\n            layout: \"vertical\",\n            item: item\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 28\n          }, this);\n\n        default:\n          return false;\n      }\n    });\n  }\n\n  let itemTitle = collapse.title;\n\n  if (collapse.icon) {\n    itemTitle = /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"pcoded-mtext\",\n      children: collapse.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 21\n    }, this);\n  }\n\n  let navLinkClass = ['nav-link'];\n  let navItemClass = ['nav-item', 'pcoded-hasmenu'];\n  const openIndex = isOpen.findIndex(id => id === collapse.id);\n\n  if (openIndex > -1) {\n    navItemClass = [...navItemClass, 'active'];\n    navLinkClass = [...navLinkClass, 'active'];\n  }\n\n  const triggerIndex = isTrigger.findIndex(id => id === collapse.id);\n\n  if (triggerIndex > -1) {\n    navItemClass = [...navItemClass, 'pcoded-trigger'];\n  }\n\n  const currentIndex = document.location.pathname.toString().split('/').findIndex(id => id === collapse.id);\n\n  if (currentIndex > -1) {\n    navItemClass = [...navItemClass, 'active'];\n    navLinkClass = [...navLinkClass, 'active'];\n  }\n\n  const subContent = /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"#\",\n      className: navLinkClass.join(' '),\n      onClick: () => dispatch({\n        type: actionType.COLLAPSE_TOGGLE,\n        menu: {\n          id: collapse.id,\n          type: type\n        }\n      }),\n      children: [/*#__PURE__*/_jsxDEV(NavIcon, {\n        items: collapse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), itemTitle, /*#__PURE__*/_jsxDEV(NavBadge, {\n        items: collapse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ListGroup, {\n      variant: \"flush\",\n      bsPrefix: \" \",\n      as: \"ul\",\n      className: \"pcoded-submenu\",\n      children: navItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n\n  let mainContent = '';\n  mainContent = /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n    as: \"li\",\n    bsPrefix: \" \",\n    className: navItemClass.join(' '),\n    children: subContent\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: mainContent\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 12\n  }, this);\n};\n\n_s(NavCollapse, \"7S9fqeJ1hCxsdp481VcARWTOumA=\");\n\n_c = NavCollapse;\nexport default NavCollapse;\n\nvar _c;\n\n$RefreshReg$(_c, \"NavCollapse\");","map":{"version":3,"sources":["/Users/johndoe/Nebe-data-vistualization/src/layouts/AdminLayout/Navigation/NavContent/NavCollapse/index.js"],"names":["React","useContext","useEffect","ListGroup","Link","NavItem","LoopNavCollapse","NavIcon","NavBadge","ConfigContext","actionType","NavCollapse","collapse","type","configContext","dispatch","isOpen","isTrigger","state","currentIndex","document","location","pathname","toString","split","findIndex","id","COLLAPSE_TOGGLE","menu","navItems","children","collapses","Object","keys","map","item","itemTitle","title","icon","navLinkClass","navItemClass","openIndex","triggerIndex","subContent","join","mainContent"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect } from 'react';\nimport { ListGroup } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nimport NavItem from '../NavItem';\nimport LoopNavCollapse from './index';\nimport NavIcon from '../NavIcon';\nimport NavBadge from '../NavBadge';\n\nimport { ConfigContext } from '../../../../../contexts/ConfigContext';\nimport * as actionType from '../../../../../store/actions';\n\nconst NavCollapse = ({ collapse, type }) => {\n    const configContext = useContext(ConfigContext);\n    const { dispatch } = configContext;\n\n    const { isOpen, isTrigger } = configContext.state;\n\n    useEffect(() => {\n        const currentIndex = document.location.pathname\n            .toString()\n            .split('/')\n            .findIndex((id) => id === collapse.id);\n        if (currentIndex > -1) {\n            dispatch({ type: actionType.COLLAPSE_TOGGLE, menu: { id: collapse.id, type: type } });\n        }\n    }, [collapse, dispatch, type]);\n\n    let navItems = '';\n    if (collapse.children) {\n        const collapses = collapse.children;\n        navItems = Object.keys(collapses).map((item) => {\n            item = collapses[item];\n            switch (item.type) {\n                case 'collapse':\n                    return <LoopNavCollapse key={item.id} collapse={item} type=\"sub\" />;\n                case 'item':\n                    return <NavItem layout=\"vertical\" key={item.id} item={item} />;\n                default:\n                    return false;\n            }\n        });\n    }\n\n    let itemTitle = collapse.title;\n    if (collapse.icon) {\n        itemTitle = <span className=\"pcoded-mtext\">{collapse.title}</span>;\n    }\n\n    let navLinkClass = ['nav-link'];\n\n    let navItemClass = ['nav-item', 'pcoded-hasmenu'];\n    const openIndex = isOpen.findIndex((id) => id === collapse.id);\n    if (openIndex > -1) {\n        navItemClass = [...navItemClass, 'active'];\n        navLinkClass = [...navLinkClass, 'active'];\n    }\n\n    const triggerIndex = isTrigger.findIndex((id) => id === collapse.id);\n    if (triggerIndex > -1) {\n        navItemClass = [...navItemClass, 'pcoded-trigger'];\n    }\n\n    const currentIndex = document.location.pathname\n        .toString()\n        .split('/')\n        .findIndex((id) => id === collapse.id);\n    if (currentIndex > -1) {\n        navItemClass = [...navItemClass, 'active'];\n        navLinkClass = [...navLinkClass, 'active'];\n    }\n\n    const subContent = (\n        <React.Fragment>\n            <Link\n                to=\"#\"\n                className={navLinkClass.join(' ')}\n                onClick={() => dispatch({ type: actionType.COLLAPSE_TOGGLE, menu: { id: collapse.id, type: type } })}\n            >\n                <NavIcon items={collapse} />\n                {itemTitle}\n                <NavBadge items={collapse} />\n            </Link>\n            <ListGroup variant=\"flush\" bsPrefix=\" \" as=\"ul\" className=\"pcoded-submenu\">\n                {navItems}\n            </ListGroup>\n        </React.Fragment>\n    );\n\n    let mainContent = '';\n    mainContent = (\n        <ListGroup.Item as=\"li\" bsPrefix=\" \" className={navItemClass.join(' ')}>\n            {subContent}\n        </ListGroup.Item>\n    );\n\n    return <React.Fragment>{mainContent}</React.Fragment>;\n};\n\nexport default NavCollapse;\n"]},"metadata":{},"sourceType":"module"}