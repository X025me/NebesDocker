{"ast":null,"code":"const leven = require('leven');\n\nconst readJson = require('read-package-json-fast');\n\nconst {\n  cmdList\n} = require('./cmd-list.js');\n\nconst didYouMean = async (npm, path, scmd) => {\n  const bestCmd = cmdList.filter(cmd => leven(scmd, cmd) < scmd.length * 0.4 && scmd !== cmd).map(str => `    npm ${str} # ${npm.commands[str].description}`);\n  const pkg = await readJson(`${path}/package.json`);\n  const {\n    scripts\n  } = pkg; // We would already be suggesting this in `npm x` so omit them here\n\n  const runScripts = ['stop', 'start', 'test', 'restart'];\n  const bestRun = Object.keys(scripts || {}).filter(cmd => leven(scmd, cmd) < scmd.length * 0.4 && !runScripts.includes(cmd)).map(str => `    npm run ${str} # run the \"${str}\" package script`);\n  const {\n    bin\n  } = pkg;\n  const bestBin = Object.keys(bin || {}).filter(cmd => leven(scmd, cmd) < scmd.length * 0.4).map(str => `    npm exec ${str} # run the \"${str}\" command from either this or a remote npm package`);\n  const best = [...bestCmd, ...bestRun, ...bestBin];\n  if (best.length === 0) return '';\n  const suggestion = best.length === 1 ? `\\n\\nDid you mean this?\\n${best[0]}` : `\\n\\nDid you mean one of these?\\n${best.slice(0, 3).join('\\n')}`;\n  return suggestion;\n};\n\nmodule.exports = didYouMean;","map":{"version":3,"sources":["/Users/johndoe/Nebe-data-vistualization/node_modules/npm/lib/utils/did-you-mean.js"],"names":["leven","require","readJson","cmdList","didYouMean","npm","path","scmd","bestCmd","filter","cmd","length","map","str","commands","description","pkg","scripts","runScripts","bestRun","Object","keys","includes","bin","bestBin","best","suggestion","slice","join","module","exports"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,wBAAD,CAAxB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAcF,OAAO,CAAC,eAAD,CAA3B;;AAEA,MAAMG,UAAU,GAAG,OAAOC,GAAP,EAAYC,IAAZ,EAAkBC,IAAlB,KAA2B;AAC5C,QAAMC,OAAO,GAAGL,OAAO,CACpBM,MADa,CACNC,GAAG,IAAIV,KAAK,CAACO,IAAD,EAAOG,GAAP,CAAL,GAAmBH,IAAI,CAACI,MAAL,GAAc,GAAjC,IAAwCJ,IAAI,KAAKG,GADlD,EAEbE,GAFa,CAETC,GAAG,IAAK,WAAUA,GAAI,MAAKR,GAAG,CAACS,QAAJ,CAAaD,GAAb,EAAkBE,WAAY,EAFhD,CAAhB;AAIA,QAAMC,GAAG,GAAG,MAAMd,QAAQ,CAAE,GAAEI,IAAK,eAAT,CAA1B;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAcD,GAApB,CAN4C,CAO5C;;AACA,QAAME,UAAU,GAAG,CAAC,MAAD,EAAS,OAAT,EAAkB,MAAlB,EAA0B,SAA1B,CAAnB;AACA,QAAMC,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYJ,OAAO,IAAI,EAAvB,EACbR,MADa,CACNC,GAAG,IAAIV,KAAK,CAACO,IAAD,EAAOG,GAAP,CAAL,GAAmBH,IAAI,CAACI,MAAL,GAAc,GAAjC,IACb,CAACO,UAAU,CAACI,QAAX,CAAoBZ,GAApB,CAFW,EAGbE,GAHa,CAGTC,GAAG,IAAK,eAAcA,GAAI,eAAcA,GAAI,kBAHnC,CAAhB;AAKA,QAAM;AAAEU,IAAAA;AAAF,MAAUP,GAAhB;AACA,QAAMQ,OAAO,GAAGJ,MAAM,CAACC,IAAP,CAAYE,GAAG,IAAI,EAAnB,EACbd,MADa,CACNC,GAAG,IAAIV,KAAK,CAACO,IAAD,EAAOG,GAAP,CAAL,GAAmBH,IAAI,CAACI,MAAL,GAAc,GADlC,EAEbC,GAFa,CAETC,GAAG,IAAK,gBAAeA,GAAI,eAAcA,GAAI,oDAFpC,CAAhB;AAIA,QAAMY,IAAI,GAAG,CAAC,GAAGjB,OAAJ,EAAa,GAAGW,OAAhB,EAAyB,GAAGK,OAA5B,CAAb;AAEA,MAAIC,IAAI,CAACd,MAAL,KAAgB,CAApB,EACE,OAAO,EAAP;AAEF,QAAMe,UAAU,GAAGD,IAAI,CAACd,MAAL,KAAgB,CAAhB,GAAqB,2BAA0Bc,IAAI,CAAC,CAAD,CAAI,EAAvD,GACd,mCAAkCA,IAAI,CAACE,KAAL,CAAW,CAAX,EAAc,CAAd,EAAiBC,IAAjB,CAAsB,IAAtB,CAA4B,EADnE;AAEA,SAAOF,UAAP;AACD,CA3BD;;AA4BAG,MAAM,CAACC,OAAP,GAAiB1B,UAAjB","sourcesContent":["const leven = require('leven')\nconst readJson = require('read-package-json-fast')\nconst { cmdList } = require('./cmd-list.js')\n\nconst didYouMean = async (npm, path, scmd) => {\n  const bestCmd = cmdList\n    .filter(cmd => leven(scmd, cmd) < scmd.length * 0.4 && scmd !== cmd)\n    .map(str => `    npm ${str} # ${npm.commands[str].description}`)\n\n  const pkg = await readJson(`${path}/package.json`)\n  const { scripts } = pkg\n  // We would already be suggesting this in `npm x` so omit them here\n  const runScripts = ['stop', 'start', 'test', 'restart']\n  const bestRun = Object.keys(scripts || {})\n    .filter(cmd => leven(scmd, cmd) < scmd.length * 0.4 &&\n      !runScripts.includes(cmd))\n    .map(str => `    npm run ${str} # run the \"${str}\" package script`)\n\n  const { bin } = pkg\n  const bestBin = Object.keys(bin || {})\n    .filter(cmd => leven(scmd, cmd) < scmd.length * 0.4)\n    .map(str => `    npm exec ${str} # run the \"${str}\" command from either this or a remote npm package`)\n\n  const best = [...bestCmd, ...bestRun, ...bestBin]\n\n  if (best.length === 0)\n    return ''\n\n  const suggestion = best.length === 1 ? `\\n\\nDid you mean this?\\n${best[0]}`\n    : `\\n\\nDid you mean one of these?\\n${best.slice(0, 3).join('\\n')}`\n  return suggestion\n}\nmodule.exports = didYouMean\n"]},"metadata":{},"sourceType":"script"}