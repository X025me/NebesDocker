{"ast":null,"code":"// Separated out for easier unit testing\nmodule.exports = async process => {\n  // set it here so that regardless of what happens later, we don't\n  // leak any private CLI configs to other programs\n  process.title = 'npm';\n\n  const {\n    checkForBrokenNode,\n    checkForUnsupportedNode\n  } = require('../lib/utils/unsupported.js');\n\n  checkForBrokenNode();\n\n  const log = require('npmlog'); // pause it here so it can unpause when we've loaded the configs\n  // and know what loglevel we should be printing.\n\n\n  log.pause();\n  checkForUnsupportedNode();\n\n  const npm = require('../lib/npm.js');\n\n  const exitHandler = require('../lib/utils/exit-handler.js');\n\n  exitHandler.setNpm(npm); // if npm is called as \"npmg\" or \"npm_g\", then\n  // run in global mode.\n\n  if (process.argv[1][process.argv[1].length - 1] === 'g') process.argv.splice(1, 1, 'npm', '-g');\n  log.verbose('cli', process.argv);\n  log.info('using', 'npm@%s', npm.version);\n  log.info('using', 'node@%s', process.version);\n  process.on('uncaughtException', exitHandler);\n  process.on('unhandledRejection', exitHandler);\n\n  const updateNotifier = require('../lib/utils/update-notifier.js'); // now actually fire up npm and run the command.\n  // this is how to use npm programmatically:\n\n\n  try {\n    await npm.load();\n\n    if (npm.config.get('version', 'cli')) {\n      npm.output(npm.version);\n      return exitHandler();\n    } // npm --versions=cli\n\n\n    if (npm.config.get('versions', 'cli')) {\n      npm.argv = ['version'];\n      npm.config.set('usage', false, 'cli');\n    }\n\n    updateNotifier(npm);\n    const cmd = npm.argv.shift();\n\n    if (!cmd) {\n      npm.output(npm.usage);\n      process.exitCode = 1;\n      return exitHandler();\n    }\n\n    const impl = npm.commands[cmd];\n\n    if (!impl) {\n      const didYouMean = require('./utils/did-you-mean.js');\n\n      const suggestions = await didYouMean(npm, npm.localPrefix, cmd);\n      npm.output(`Unknown command: \"${cmd}\"${suggestions}\\n\\nTo see a list of supported npm commands, run:\\n  npm help`);\n      process.exitCode = 1;\n      return exitHandler();\n    }\n\n    impl(npm.argv, exitHandler);\n  } catch (err) {\n    return exitHandler(err);\n  }\n};","map":{"version":3,"sources":["/Users/johndoe/Nebe-data-vistualization/node_modules/npm/lib/cli.js"],"names":["module","exports","process","title","checkForBrokenNode","checkForUnsupportedNode","require","log","pause","npm","exitHandler","setNpm","argv","length","splice","verbose","info","version","on","updateNotifier","load","config","get","output","set","cmd","shift","usage","exitCode","impl","commands","didYouMean","suggestions","localPrefix","err"],"mappings":"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","sourcesContent":["// Separated out for easier unit testing\nmodule.exports = async (process) => {\n  // set it here so that regardless of what happens later, we don't\n  // leak any private CLI configs to other programs\n  process.title = 'npm'\n\n  const {\n    checkForBrokenNode,\n    checkForUnsupportedNode,\n  } = require('../lib/utils/unsupported.js')\n\n  checkForBrokenNode()\n\n  const log = require('npmlog')\n  // pause it here so it can unpause when we've loaded the configs\n  // and know what loglevel we should be printing.\n  log.pause()\n\n  checkForUnsupportedNode()\n\n  const npm = require('../lib/npm.js')\n  const exitHandler = require('../lib/utils/exit-handler.js')\n  exitHandler.setNpm(npm)\n\n  // if npm is called as \"npmg\" or \"npm_g\", then\n  // run in global mode.\n  if (process.argv[1][process.argv[1].length - 1] === 'g')\n    process.argv.splice(1, 1, 'npm', '-g')\n\n  log.verbose('cli', process.argv)\n\n  log.info('using', 'npm@%s', npm.version)\n  log.info('using', 'node@%s', process.version)\n\n  process.on('uncaughtException', exitHandler)\n  process.on('unhandledRejection', exitHandler)\n\n  const updateNotifier = require('../lib/utils/update-notifier.js')\n\n  // now actually fire up npm and run the command.\n  // this is how to use npm programmatically:\n  try {\n    await npm.load()\n    if (npm.config.get('version', 'cli')) {\n      npm.output(npm.version)\n      return exitHandler()\n    }\n\n    // npm --versions=cli\n    if (npm.config.get('versions', 'cli')) {\n      npm.argv = ['version']\n      npm.config.set('usage', false, 'cli')\n    }\n\n    updateNotifier(npm)\n\n    const cmd = npm.argv.shift()\n    if (!cmd) {\n      npm.output(npm.usage)\n      process.exitCode = 1\n      return exitHandler()\n    }\n\n    const impl = npm.commands[cmd]\n    if (!impl) {\n      const didYouMean = require('./utils/did-you-mean.js')\n      const suggestions = await didYouMean(npm, npm.localPrefix, cmd)\n      npm.output(`Unknown command: \"${cmd}\"${suggestions}\\n\\nTo see a list of supported npm commands, run:\\n  npm help`)\n      process.exitCode = 1\n      return exitHandler()\n    }\n\n    impl(npm.argv, exitHandler)\n  } catch (err) {\n    return exitHandler(err)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}