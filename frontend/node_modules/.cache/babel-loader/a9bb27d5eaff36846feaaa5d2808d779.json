{"ast":null,"code":"const cacache = require('cacache');\n\nconst {\n  promisify\n} = require('util');\n\nconst log = require('npmlog');\n\nconst pacote = require('pacote');\n\nconst path = require('path');\n\nconst rimraf = promisify(require('rimraf'));\n\nconst BaseCommand = require('./base-command.js');\n\nclass Cache extends BaseCommand {\n  static get description() {\n    return 'Manipulates packages cache';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get name() {\n    return 'cache';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get params() {\n    return ['cache'];\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get usage() {\n    return ['add <tarball file>', 'add <folder>', 'add <tarball url>', 'add <git url>', 'add <name>@<version>', 'clean', 'verify'];\n  }\n\n  async completion(opts) {\n    const argv = opts.conf.argv.remain;\n    if (argv.length === 2) return ['add', 'clean', 'verify']; // TODO - eventually...\n\n    switch (argv[2]) {\n      case 'verify':\n      case 'clean':\n      case 'add':\n        return [];\n    }\n  }\n\n  exec(args, cb) {\n    this.cache(args).then(() => cb()).catch(cb);\n  }\n\n  async cache(args) {\n    const cmd = args.shift();\n\n    switch (cmd) {\n      case 'rm':\n      case 'clear':\n      case 'clean':\n        return await this.clean(args);\n\n      case 'add':\n        return await this.add(args);\n\n      case 'verify':\n      case 'check':\n        return await this.verify();\n\n      default:\n        throw Object.assign(new Error(this.usage), {\n          code: 'EUSAGE'\n        });\n    }\n  } // npm cache clean [pkg]*\n\n\n  async clean(args) {\n    if (args.length) throw new Error('npm cache clear does not accept arguments');\n    const cachePath = path.join(this.npm.cache, '_cacache');\n\n    if (!this.npm.config.get('force')) {\n      throw new Error(`As of npm@5, the npm cache self-heals from corruption issues\nby treating integrity mismatches as cache misses.  As a result,\ndata extracted from the cache is guaranteed to be valid.  If you\nwant to make sure everything is consistent, use \\`npm cache verify\\`\ninstead.  Deleting the cache can only make npm go slower, and is\nnot likely to correct any problems you may be encountering!\n\nOn the other hand, if you're debugging an issue with the installer,\nor race conditions that depend on the timing of writing to an empty\ncache, you can use \\`npm install --cache /tmp/empty-cache\\` to use a\ntemporary cache instead of nuking the actual one.\n\nIf you're sure you want to delete the entire cache, rerun this command\nwith --force.`);\n    }\n\n    return rimraf(cachePath);\n  } // npm cache add <tarball-url>...\n  // npm cache add <pkg> <ver>...\n  // npm cache add <tarball>...\n  // npm cache add <folder>...\n\n\n  async add(args) {\n    const usage = 'Usage:\\n' + '    npm cache add <tarball-url>...\\n' + '    npm cache add <pkg>@<ver>...\\n' + '    npm cache add <tarball>...\\n' + '    npm cache add <folder>...\\n';\n    log.silly('cache add', 'args', args);\n    if (args.length === 0) throw Object.assign(new Error(usage), {\n      code: 'EUSAGE'\n    });\n    return Promise.all(args.map(spec => {\n      log.silly('cache add', 'spec', spec); // we ask pacote for the thing, and then just throw the data\n      // away so that it tee-pipes it into the cache like it does\n      // for a normal request.\n\n      return pacote.tarball.stream(spec, stream => {\n        stream.resume();\n        return stream.promise();\n      }, this.npm.flatOptions);\n    }));\n  }\n\n  async verify() {\n    const cache = path.join(this.npm.cache, '_cacache');\n    const prefix = cache.indexOf(process.env.HOME) === 0 ? `~${cache.substr(process.env.HOME.length)}` : cache;\n    const stats = await cacache.verify(cache);\n    this.npm.output(`Cache verified and compressed (${prefix})`);\n    this.npm.output(`Content verified: ${stats.verifiedContent} (${stats.keptSize} bytes)`);\n    stats.badContentCount && this.npm.output(`Corrupted content removed: ${stats.badContentCount}`);\n    stats.reclaimedCount && this.npm.output(`Content garbage-collected: ${stats.reclaimedCount} (${stats.reclaimedSize} bytes)`);\n    stats.missingContent && this.npm.output(`Missing content: ${stats.missingContent}`);\n    this.npm.output(`Index entries: ${stats.totalEntries}`);\n    this.npm.output(`Finished in ${stats.runTime.total / 1000}s`);\n  }\n\n}\n\nmodule.exports = Cache;","map":{"version":3,"sources":["/Users/johndoe/Nebe-data-vistualization/node_modules/npm/lib/cache.js"],"names":["cacache","require","promisify","log","pacote","path","rimraf","BaseCommand","Cache","description","name","params","usage","completion","opts","argv","conf","remain","length","exec","args","cb","cache","then","catch","cmd","shift","clean","add","verify","Object","assign","Error","code","cachePath","join","npm","config","get","silly","Promise","all","map","spec","tarball","stream","resume","promise","flatOptions","prefix","indexOf","process","env","HOME","substr","stats","output","verifiedContent","keptSize","badContentCount","reclaimedCount","reclaimedSize","missingContent","totalEntries","runTime","total","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAgBD,OAAO,CAAC,MAAD,CAA7B;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,QAAD,CAAnB;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMI,IAAI,GAAGJ,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMK,MAAM,GAAGJ,SAAS,CAACD,OAAO,CAAC,QAAD,CAAR,CAAxB;;AACA,MAAMM,WAAW,GAAGN,OAAO,CAAC,mBAAD,CAA3B;;AAEA,MAAMO,KAAN,SAAoBD,WAApB,CAAgC;AACR,aAAXE,WAAW,GAAI;AACxB,WAAO,4BAAP;AACD;AAED;;;AACe,aAAJC,IAAI,GAAI;AACjB,WAAO,OAAP;AACD;AAED;;;AACiB,aAANC,MAAM,GAAI;AACnB,WAAO,CAAC,OAAD,CAAP;AACD;AAED;;;AACgB,aAALC,KAAK,GAAI;AAClB,WAAO,CACL,oBADK,EAEL,cAFK,EAGL,mBAHK,EAIL,eAJK,EAKL,sBALK,EAML,OANK,EAOL,QAPK,CAAP;AASD;;AAEe,QAAVC,UAAU,CAAEC,IAAF,EAAQ;AACtB,UAAMC,IAAI,GAAGD,IAAI,CAACE,IAAL,CAAUD,IAAV,CAAeE,MAA5B;AACA,QAAIF,IAAI,CAACG,MAAL,KAAgB,CAApB,EACE,OAAO,CAAC,KAAD,EAAQ,OAAR,EAAiB,QAAjB,CAAP,CAHoB,CAKtB;;AACA,YAAQH,IAAI,CAAC,CAAD,CAAZ;AACE,WAAK,QAAL;AACA,WAAK,OAAL;AACA,WAAK,KAAL;AACE,eAAO,EAAP;AAJJ;AAMD;;AAEDI,EAAAA,IAAI,CAAEC,IAAF,EAAQC,EAAR,EAAY;AACd,SAAKC,KAAL,CAAWF,IAAX,EAAiBG,IAAjB,CAAsB,MAAMF,EAAE,EAA9B,EAAkCG,KAAlC,CAAwCH,EAAxC;AACD;;AAEU,QAALC,KAAK,CAAEF,IAAF,EAAQ;AACjB,UAAMK,GAAG,GAAGL,IAAI,CAACM,KAAL,EAAZ;;AACA,YAAQD,GAAR;AACE,WAAK,IAAL;AAAW,WAAK,OAAL;AAAc,WAAK,OAAL;AACvB,eAAO,MAAM,KAAKE,KAAL,CAAWP,IAAX,CAAb;;AACF,WAAK,KAAL;AACE,eAAO,MAAM,KAAKQ,GAAL,CAASR,IAAT,CAAb;;AACF,WAAK,QAAL;AAAe,WAAK,OAAL;AACb,eAAO,MAAM,KAAKS,MAAL,EAAb;;AACF;AACE,cAAMC,MAAM,CAACC,MAAP,CAAc,IAAIC,KAAJ,CAAU,KAAKpB,KAAf,CAAd,EAAqC;AAAEqB,UAAAA,IAAI,EAAE;AAAR,SAArC,CAAN;AARJ;AAUD,GA1D6B,CA4D9B;;;AACW,QAALN,KAAK,CAAEP,IAAF,EAAQ;AACjB,QAAIA,IAAI,CAACF,MAAT,EACE,MAAM,IAAIc,KAAJ,CAAU,2CAAV,CAAN;AAEF,UAAME,SAAS,GAAG7B,IAAI,CAAC8B,IAAL,CAAU,KAAKC,GAAL,CAASd,KAAnB,EAA0B,UAA1B,CAAlB;;AACA,QAAI,CAAC,KAAKc,GAAL,CAASC,MAAT,CAAgBC,GAAhB,CAAoB,OAApB,CAAL,EAAmC;AACjC,YAAM,IAAIN,KAAJ,CAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAbY,CAAN;AAcD;;AACD,WAAO1B,MAAM,CAAC4B,SAAD,CAAb;AACD,GAnF6B,CAqF9B;AACA;AACA;AACA;;;AACS,QAAHN,GAAG,CAAER,IAAF,EAAQ;AACf,UAAMR,KAAK,GAAG,aACZ,sCADY,GAEZ,oCAFY,GAGZ,kCAHY,GAIZ,iCAJF;AAKAT,IAAAA,GAAG,CAACoC,KAAJ,CAAU,WAAV,EAAuB,MAAvB,EAA+BnB,IAA/B;AACA,QAAIA,IAAI,CAACF,MAAL,KAAgB,CAApB,EACE,MAAMY,MAAM,CAACC,MAAP,CAAc,IAAIC,KAAJ,CAAUpB,KAAV,CAAd,EAAgC;AAAEqB,MAAAA,IAAI,EAAE;AAAR,KAAhC,CAAN;AAEF,WAAOO,OAAO,CAACC,GAAR,CAAYrB,IAAI,CAACsB,GAAL,CAASC,IAAI,IAAI;AAClCxC,MAAAA,GAAG,CAACoC,KAAJ,CAAU,WAAV,EAAuB,MAAvB,EAA+BI,IAA/B,EADkC,CAElC;AACA;AACA;;AACA,aAAOvC,MAAM,CAACwC,OAAP,CAAeC,MAAf,CAAsBF,IAAtB,EAA4BE,MAAM,IAAI;AAC3CA,QAAAA,MAAM,CAACC,MAAP;AACA,eAAOD,MAAM,CAACE,OAAP,EAAP;AACD,OAHM,EAGJ,KAAKX,GAAL,CAASY,WAHL,CAAP;AAID,KATkB,CAAZ,CAAP;AAUD;;AAEW,QAANnB,MAAM,GAAI;AACd,UAAMP,KAAK,GAAGjB,IAAI,CAAC8B,IAAL,CAAU,KAAKC,GAAL,CAASd,KAAnB,EAA0B,UAA1B,CAAd;AACA,UAAM2B,MAAM,GAAG3B,KAAK,CAAC4B,OAAN,CAAcC,OAAO,CAACC,GAAR,CAAYC,IAA1B,MAAoC,CAApC,GACV,IAAG/B,KAAK,CAACgC,MAAN,CAAaH,OAAO,CAACC,GAAR,CAAYC,IAAZ,CAAiBnC,MAA9B,CAAsC,EAD/B,GAEXI,KAFJ;AAGA,UAAMiC,KAAK,GAAG,MAAMvD,OAAO,CAAC6B,MAAR,CAAeP,KAAf,CAApB;AACA,SAAKc,GAAL,CAASoB,MAAT,CAAiB,kCAAiCP,MAAO,GAAzD;AACA,SAAKb,GAAL,CAASoB,MAAT,CAAiB,qBAAoBD,KAAK,CAACE,eAAgB,KAAIF,KAAK,CAACG,QAAS,SAA9E;AACAH,IAAAA,KAAK,CAACI,eAAN,IAAyB,KAAKvB,GAAL,CAASoB,MAAT,CAAiB,8BAA6BD,KAAK,CAACI,eAAgB,EAApE,CAAzB;AACAJ,IAAAA,KAAK,CAACK,cAAN,IAAwB,KAAKxB,GAAL,CAASoB,MAAT,CAAiB,8BAA6BD,KAAK,CAACK,cAAe,KAAIL,KAAK,CAACM,aAAc,SAA3F,CAAxB;AACAN,IAAAA,KAAK,CAACO,cAAN,IAAwB,KAAK1B,GAAL,CAASoB,MAAT,CAAiB,oBAAmBD,KAAK,CAACO,cAAe,EAAzD,CAAxB;AACA,SAAK1B,GAAL,CAASoB,MAAT,CAAiB,kBAAiBD,KAAK,CAACQ,YAAa,EAArD;AACA,SAAK3B,GAAL,CAASoB,MAAT,CAAiB,eAAcD,KAAK,CAACS,OAAN,CAAcC,KAAd,GAAsB,IAAK,GAA1D;AACD;;AA5H6B;;AA+HhCC,MAAM,CAACC,OAAP,GAAiB3D,KAAjB","sourcesContent":["const cacache = require('cacache')\nconst { promisify } = require('util')\nconst log = require('npmlog')\nconst pacote = require('pacote')\nconst path = require('path')\nconst rimraf = promisify(require('rimraf'))\nconst BaseCommand = require('./base-command.js')\n\nclass Cache extends BaseCommand {\n  static get description () {\n    return 'Manipulates packages cache'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'cache'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return ['cache']\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return [\n      'add <tarball file>',\n      'add <folder>',\n      'add <tarball url>',\n      'add <git url>',\n      'add <name>@<version>',\n      'clean',\n      'verify',\n    ]\n  }\n\n  async completion (opts) {\n    const argv = opts.conf.argv.remain\n    if (argv.length === 2)\n      return ['add', 'clean', 'verify']\n\n    // TODO - eventually...\n    switch (argv[2]) {\n      case 'verify':\n      case 'clean':\n      case 'add':\n        return []\n    }\n  }\n\n  exec (args, cb) {\n    this.cache(args).then(() => cb()).catch(cb)\n  }\n\n  async cache (args) {\n    const cmd = args.shift()\n    switch (cmd) {\n      case 'rm': case 'clear': case 'clean':\n        return await this.clean(args)\n      case 'add':\n        return await this.add(args)\n      case 'verify': case 'check':\n        return await this.verify()\n      default:\n        throw Object.assign(new Error(this.usage), { code: 'EUSAGE' })\n    }\n  }\n\n  // npm cache clean [pkg]*\n  async clean (args) {\n    if (args.length)\n      throw new Error('npm cache clear does not accept arguments')\n\n    const cachePath = path.join(this.npm.cache, '_cacache')\n    if (!this.npm.config.get('force')) {\n      throw new Error(`As of npm@5, the npm cache self-heals from corruption issues\nby treating integrity mismatches as cache misses.  As a result,\ndata extracted from the cache is guaranteed to be valid.  If you\nwant to make sure everything is consistent, use \\`npm cache verify\\`\ninstead.  Deleting the cache can only make npm go slower, and is\nnot likely to correct any problems you may be encountering!\n\nOn the other hand, if you're debugging an issue with the installer,\nor race conditions that depend on the timing of writing to an empty\ncache, you can use \\`npm install --cache /tmp/empty-cache\\` to use a\ntemporary cache instead of nuking the actual one.\n\nIf you're sure you want to delete the entire cache, rerun this command\nwith --force.`)\n    }\n    return rimraf(cachePath)\n  }\n\n  // npm cache add <tarball-url>...\n  // npm cache add <pkg> <ver>...\n  // npm cache add <tarball>...\n  // npm cache add <folder>...\n  async add (args) {\n    const usage = 'Usage:\\n' +\n      '    npm cache add <tarball-url>...\\n' +\n      '    npm cache add <pkg>@<ver>...\\n' +\n      '    npm cache add <tarball>...\\n' +\n      '    npm cache add <folder>...\\n'\n    log.silly('cache add', 'args', args)\n    if (args.length === 0)\n      throw Object.assign(new Error(usage), { code: 'EUSAGE' })\n\n    return Promise.all(args.map(spec => {\n      log.silly('cache add', 'spec', spec)\n      // we ask pacote for the thing, and then just throw the data\n      // away so that it tee-pipes it into the cache like it does\n      // for a normal request.\n      return pacote.tarball.stream(spec, stream => {\n        stream.resume()\n        return stream.promise()\n      }, this.npm.flatOptions)\n    }))\n  }\n\n  async verify () {\n    const cache = path.join(this.npm.cache, '_cacache')\n    const prefix = cache.indexOf(process.env.HOME) === 0\n      ? `~${cache.substr(process.env.HOME.length)}`\n      : cache\n    const stats = await cacache.verify(cache)\n    this.npm.output(`Cache verified and compressed (${prefix})`)\n    this.npm.output(`Content verified: ${stats.verifiedContent} (${stats.keptSize} bytes)`)\n    stats.badContentCount && this.npm.output(`Corrupted content removed: ${stats.badContentCount}`)\n    stats.reclaimedCount && this.npm.output(`Content garbage-collected: ${stats.reclaimedCount} (${stats.reclaimedSize} bytes)`)\n    stats.missingContent && this.npm.output(`Missing content: ${stats.missingContent}`)\n    this.npm.output(`Index entries: ${stats.totalEntries}`)\n    this.npm.output(`Finished in ${stats.runTime.total / 1000}s`)\n  }\n}\n\nmodule.exports = Cache\n"]},"metadata":{},"sourceType":"script"}