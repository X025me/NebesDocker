{"ast":null,"code":"const os = require('os');\n\nconst path = require('path');\n\nconst pacote = require('pacote');\n\nconst table = require('text-table');\n\nconst color = require('chalk');\n\nconst styles = require('ansistyles');\n\nconst npa = require('npm-package-arg');\n\nconst pickManifest = require('npm-pick-manifest');\n\nconst Arborist = require('@npmcli/arborist');\n\nconst ansiTrim = require('./utils/ansi-trim.js');\n\nconst ArboristWorkspaceCmd = require('./workspaces/arborist-cmd.js');\n\nclass Outdated extends ArboristWorkspaceCmd {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description() {\n    return 'Check for outdated packages';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get name() {\n    return 'outdated';\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get usage() {\n    return ['[[<@scope>/]<pkg> ...]'];\n  }\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n\n\n  static get params() {\n    return ['all', 'json', 'long', 'parseable', 'global', 'workspace'];\n  }\n\n  exec(args, cb) {\n    this.outdated(args).then(() => cb()).catch(cb);\n  }\n\n  async outdated(args) {\n    const global = path.resolve(this.npm.globalDir, '..');\n    const where = this.npm.config.get('global') ? global : this.npm.prefix;\n    const arb = new Arborist({ ...this.npm.flatOptions,\n      path: where\n    });\n    this.edges = new Set();\n    this.list = [];\n    this.tree = await arb.loadActual();\n\n    if (this.workspaceNames && this.workspaceNames.length) {\n      this.filterSet = arb.workspaceDependencySet(this.tree, this.workspaceNames);\n    }\n\n    if (args.length !== 0) {\n      // specific deps\n      for (let i = 0; i < args.length; i++) {\n        const nodes = this.tree.inventory.query('name', args[i]);\n        this.getEdges(nodes, 'edgesIn');\n      }\n    } else {\n      if (this.npm.config.get('all')) {\n        // all deps in tree\n        const nodes = this.tree.inventory.values();\n        this.getEdges(nodes, 'edgesOut');\n      } // top-level deps\n\n\n      this.getEdges();\n    }\n\n    await Promise.all(Array.from(this.edges).map(edge => {\n      return this.getOutdatedInfo(edge);\n    })); // sorts list alphabetically\n\n    const outdated = this.list.sort((a, b) => a.name.localeCompare(b.name, 'en')); // return if no outdated packages\n\n    if (outdated.length === 0 && !this.npm.config.get('json')) return; // display results\n\n    if (this.npm.config.get('json')) this.npm.output(this.makeJSON(outdated));else if (this.npm.config.get('parseable')) this.npm.output(this.makeParseable(outdated));else {\n      const outList = outdated.map(x => this.makePretty(x));\n      const outHead = ['Package', 'Current', 'Wanted', 'Latest', 'Location', 'Depended by'];\n      if (this.npm.config.get('long')) outHead.push('Package Type', 'Homepage');\n      const outTable = [outHead].concat(outList);\n      if (this.npm.color) outTable[0] = outTable[0].map(heading => styles.underline(heading));\n      const tableOpts = {\n        align: ['l', 'r', 'r', 'r', 'l'],\n        stringLength: s => ansiTrim(s).length\n      };\n      this.npm.output(table(outTable, tableOpts));\n    }\n  }\n\n  getEdges(nodes, type) {\n    // when no nodes are provided then it should only read direct deps\n    // from the root node and its workspaces direct dependencies\n    if (!nodes) {\n      this.getEdgesOut(this.tree);\n      this.getWorkspacesEdges();\n      return;\n    }\n\n    for (const node of nodes) {\n      type === 'edgesOut' ? this.getEdgesOut(node) : this.getEdgesIn(node);\n    }\n  }\n\n  getEdgesIn(node) {\n    for (const edge of node.edgesIn) this.trackEdge(edge);\n  }\n\n  getEdgesOut(node) {\n    // TODO: normalize usage of edges and avoid looping through nodes here\n    if (this.npm.config.get('global')) {\n      for (const child of node.children.values()) this.trackEdge(child);\n    } else {\n      for (const edge of node.edgesOut.values()) this.trackEdge(edge);\n    }\n  }\n\n  trackEdge(edge) {\n    const filteredOut = edge.from && this.filterSet && this.filterSet.size > 0 && !this.filterSet.has(edge.from.target);\n    if (filteredOut) return;\n    this.edges.add(edge);\n  }\n\n  getWorkspacesEdges(node) {\n    if (this.npm.config.get('global')) return;\n\n    for (const edge of this.tree.edgesOut.values()) {\n      const workspace = edge && edge.to && edge.to.target && edge.to.target.isWorkspace;\n      if (workspace) this.getEdgesOut(edge.to.target);\n    }\n  }\n\n  async getPackument(spec) {\n    const packument = await pacote.packument(spec, { ...this.npm.flatOptions,\n      fullMetadata: this.npm.config.get('long'),\n      preferOnline: true\n    });\n    return packument;\n  }\n\n  async getOutdatedInfo(edge) {\n    const spec = npa(edge.name);\n    const node = edge.to || edge;\n    const {\n      path,\n      location\n    } = node;\n    const {\n      version: current\n    } = node.package || {};\n    const type = edge.optional ? 'optionalDependencies' : edge.peer ? 'peerDependencies' : edge.dev ? 'devDependencies' : 'dependencies';\n\n    for (const omitType of this.npm.config.get('omit')) {\n      if (node[omitType]) return;\n    } // deps different from prod not currently\n    // on disk are not included in the output\n\n\n    if (edge.error === 'MISSING' && type !== 'dependencies') return;\n\n    try {\n      const packument = await this.getPackument(spec);\n      const expected = edge.spec; // if it's not a range, version, or tag, skip it\n\n      try {\n        if (!npa(`${edge.name}@${edge.spec}`).registry) return null;\n      } catch (err) {\n        return null;\n      }\n\n      const wanted = pickManifest(packument, expected, this.npm.flatOptions);\n      const latest = pickManifest(packument, '*', this.npm.flatOptions);\n\n      if (!current || current !== wanted.version || wanted.version !== latest.version) {\n        const dependent = edge.from ? this.maybeWorkspaceName(edge.from) : 'global';\n        this.list.push({\n          name: edge.name,\n          path,\n          type,\n          current,\n          location,\n          wanted: wanted.version,\n          latest: latest.version,\n          dependent,\n          homepage: packument.homepage\n        });\n      }\n    } catch (err) {\n      // silently catch and ignore ETARGET, E403 &\n      // E404 errors, deps are just skipped\n      if (!(err.code === 'ETARGET' || err.code === 'E403' || err.code === 'E404')) throw err;\n    }\n  }\n\n  maybeWorkspaceName(node) {\n    if (!node.isWorkspace) return node.name;\n    const humanOutput = !this.npm.config.get('json') && !this.npm.config.get('parseable');\n    const workspaceName = humanOutput ? node.pkgid : node.name;\n    return this.npm.color && humanOutput ? color.green(workspaceName) : workspaceName;\n  } // formatting functions\n\n\n  makePretty(dep) {\n    const {\n      current = 'MISSING',\n      location = '-',\n      homepage = '',\n      name,\n      wanted,\n      latest,\n      type,\n      dependent\n    } = dep;\n    const columns = [name, current, wanted, latest, location, dependent];\n\n    if (this.npm.config.get('long')) {\n      columns[6] = type;\n      columns[7] = homepage;\n    }\n\n    if (this.npm.color) {\n      columns[0] = color[current === wanted ? 'yellow' : 'red'](columns[0]); // current\n\n      columns[2] = color.green(columns[2]); // wanted\n\n      columns[3] = color.magenta(columns[3]); // latest\n    }\n\n    return columns;\n  } // --parseable creates output like this:\n  // <fullpath>:<name@wanted>:<name@installed>:<name@latest>:<dependedby>\n\n\n  makeParseable(list) {\n    return list.map(dep => {\n      const {\n        name,\n        current,\n        wanted,\n        latest,\n        path,\n        dependent,\n        type,\n        homepage\n      } = dep;\n      const out = [path, name + '@' + wanted, current ? name + '@' + current : 'MISSING', name + '@' + latest, dependent];\n      if (this.npm.config.get('long')) out.push(type, homepage);\n      return out.join(':');\n    }).join(os.EOL);\n  }\n\n  makeJSON(list) {\n    const out = {};\n    list.forEach(dep => {\n      const {\n        name,\n        current,\n        wanted,\n        latest,\n        path,\n        type,\n        dependent,\n        homepage\n      } = dep;\n      out[name] = {\n        current,\n        wanted,\n        latest,\n        dependent,\n        location: path\n      };\n\n      if (this.npm.config.get('long')) {\n        out[name].type = type;\n        out[name].homepage = homepage;\n      }\n    });\n    return JSON.stringify(out, null, 2);\n  }\n\n}\n\nmodule.exports = Outdated;","map":{"version":3,"sources":["/Users/johndoe/Nebe-data-vistualization/node_modules/npm/lib/outdated.js"],"names":["os","require","path","pacote","table","color","styles","npa","pickManifest","Arborist","ansiTrim","ArboristWorkspaceCmd","Outdated","description","name","usage","params","exec","args","cb","outdated","then","catch","global","resolve","npm","globalDir","where","config","get","prefix","arb","flatOptions","edges","Set","list","tree","loadActual","workspaceNames","length","filterSet","workspaceDependencySet","i","nodes","inventory","query","getEdges","values","Promise","all","Array","from","map","edge","getOutdatedInfo","sort","a","b","localeCompare","output","makeJSON","makeParseable","outList","x","makePretty","outHead","push","outTable","concat","heading","underline","tableOpts","align","stringLength","s","type","getEdgesOut","getWorkspacesEdges","node","getEdgesIn","edgesIn","trackEdge","child","children","edgesOut","filteredOut","size","has","target","add","workspace","to","isWorkspace","getPackument","spec","packument","fullMetadata","preferOnline","location","version","current","package","optional","peer","dev","omitType","error","expected","registry","err","wanted","latest","dependent","maybeWorkspaceName","homepage","code","humanOutput","workspaceName","pkgid","green","dep","columns","magenta","out","join","EOL","forEach","JSON","stringify","module","exports"],"mappings":"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","sourcesContent":["const os = require('os')\nconst path = require('path')\nconst pacote = require('pacote')\nconst table = require('text-table')\nconst color = require('chalk')\nconst styles = require('ansistyles')\nconst npa = require('npm-package-arg')\nconst pickManifest = require('npm-pick-manifest')\n\nconst Arborist = require('@npmcli/arborist')\n\nconst ansiTrim = require('./utils/ansi-trim.js')\nconst ArboristWorkspaceCmd = require('./workspaces/arborist-cmd.js')\n\nclass Outdated extends ArboristWorkspaceCmd {\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get description () {\n    return 'Check for outdated packages'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get name () {\n    return 'outdated'\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get usage () {\n    return ['[[<@scope>/]<pkg> ...]']\n  }\n\n  /* istanbul ignore next - see test/lib/load-all-commands.js */\n  static get params () {\n    return [\n      'all',\n      'json',\n      'long',\n      'parseable',\n      'global',\n      'workspace',\n    ]\n  }\n\n  exec (args, cb) {\n    this.outdated(args).then(() => cb()).catch(cb)\n  }\n\n  async outdated (args) {\n    const global = path.resolve(this.npm.globalDir, '..')\n    const where = this.npm.config.get('global')\n      ? global\n      : this.npm.prefix\n\n    const arb = new Arborist({\n      ...this.npm.flatOptions,\n      path: where,\n    })\n\n    this.edges = new Set()\n    this.list = []\n    this.tree = await arb.loadActual()\n\n    if (this.workspaceNames && this.workspaceNames.length) {\n      this.filterSet =\n        arb.workspaceDependencySet(this.tree, this.workspaceNames)\n    }\n\n    if (args.length !== 0) {\n      // specific deps\n      for (let i = 0; i < args.length; i++) {\n        const nodes = this.tree.inventory.query('name', args[i])\n        this.getEdges(nodes, 'edgesIn')\n      }\n    } else {\n      if (this.npm.config.get('all')) {\n        // all deps in tree\n        const nodes = this.tree.inventory.values()\n        this.getEdges(nodes, 'edgesOut')\n      }\n      // top-level deps\n      this.getEdges()\n    }\n\n    await Promise.all(Array.from(this.edges).map((edge) => {\n      return this.getOutdatedInfo(edge)\n    }))\n\n    // sorts list alphabetically\n    const outdated = this.list.sort((a, b) => a.name.localeCompare(b.name, 'en'))\n\n    // return if no outdated packages\n    if (outdated.length === 0 && !this.npm.config.get('json'))\n      return\n\n    // display results\n    if (this.npm.config.get('json'))\n      this.npm.output(this.makeJSON(outdated))\n    else if (this.npm.config.get('parseable'))\n      this.npm.output(this.makeParseable(outdated))\n    else {\n      const outList = outdated.map(x => this.makePretty(x))\n      const outHead = ['Package',\n        'Current',\n        'Wanted',\n        'Latest',\n        'Location',\n        'Depended by',\n      ]\n\n      if (this.npm.config.get('long'))\n        outHead.push('Package Type', 'Homepage')\n      const outTable = [outHead].concat(outList)\n\n      if (this.npm.color)\n        outTable[0] = outTable[0].map(heading => styles.underline(heading))\n\n      const tableOpts = {\n        align: ['l', 'r', 'r', 'r', 'l'],\n        stringLength: s => ansiTrim(s).length,\n      }\n      this.npm.output(table(outTable, tableOpts))\n    }\n  }\n\n  getEdges (nodes, type) {\n    // when no nodes are provided then it should only read direct deps\n    // from the root node and its workspaces direct dependencies\n    if (!nodes) {\n      this.getEdgesOut(this.tree)\n      this.getWorkspacesEdges()\n      return\n    }\n\n    for (const node of nodes) {\n      type === 'edgesOut'\n        ? this.getEdgesOut(node)\n        : this.getEdgesIn(node)\n    }\n  }\n\n  getEdgesIn (node) {\n    for (const edge of node.edgesIn)\n      this.trackEdge(edge)\n  }\n\n  getEdgesOut (node) {\n    // TODO: normalize usage of edges and avoid looping through nodes here\n    if (this.npm.config.get('global')) {\n      for (const child of node.children.values())\n        this.trackEdge(child)\n    } else {\n      for (const edge of node.edgesOut.values())\n        this.trackEdge(edge)\n    }\n  }\n\n  trackEdge (edge) {\n    const filteredOut =\n      edge.from\n        && this.filterSet\n        && this.filterSet.size > 0\n        && !this.filterSet.has(edge.from.target)\n\n    if (filteredOut)\n      return\n\n    this.edges.add(edge)\n  }\n\n  getWorkspacesEdges (node) {\n    if (this.npm.config.get('global'))\n      return\n\n    for (const edge of this.tree.edgesOut.values()) {\n      const workspace = edge\n        && edge.to\n        && edge.to.target\n        && edge.to.target.isWorkspace\n\n      if (workspace)\n        this.getEdgesOut(edge.to.target)\n    }\n  }\n\n  async getPackument (spec) {\n    const packument = await pacote.packument(spec, {\n      ...this.npm.flatOptions,\n      fullMetadata: this.npm.config.get('long'),\n      preferOnline: true,\n    })\n    return packument\n  }\n\n  async getOutdatedInfo (edge) {\n    const spec = npa(edge.name)\n    const node = edge.to || edge\n    const { path, location } = node\n    const { version: current } = node.package || {}\n\n    const type = edge.optional ? 'optionalDependencies'\n      : edge.peer ? 'peerDependencies'\n      : edge.dev ? 'devDependencies'\n      : 'dependencies'\n\n    for (const omitType of this.npm.config.get('omit')) {\n      if (node[omitType])\n        return\n    }\n\n    // deps different from prod not currently\n    // on disk are not included in the output\n    if (edge.error === 'MISSING' && type !== 'dependencies')\n      return\n\n    try {\n      const packument = await this.getPackument(spec)\n      const expected = edge.spec\n      // if it's not a range, version, or tag, skip it\n      try {\n        if (!npa(`${edge.name}@${edge.spec}`).registry)\n          return null\n      } catch (err) {\n        return null\n      }\n      const wanted = pickManifest(packument, expected, this.npm.flatOptions)\n      const latest = pickManifest(packument, '*', this.npm.flatOptions)\n\n      if (\n        !current ||\n        current !== wanted.version ||\n        wanted.version !== latest.version\n      ) {\n        const dependent = edge.from ?\n          this.maybeWorkspaceName(edge.from)\n          : 'global'\n\n        this.list.push({\n          name: edge.name,\n          path,\n          type,\n          current,\n          location,\n          wanted: wanted.version,\n          latest: latest.version,\n          dependent,\n          homepage: packument.homepage,\n        })\n      }\n    } catch (err) {\n      // silently catch and ignore ETARGET, E403 &\n      // E404 errors, deps are just skipped\n      if (!(\n        err.code === 'ETARGET' ||\n        err.code === 'E403' ||\n        err.code === 'E404')\n      )\n        throw err\n    }\n  }\n\n  maybeWorkspaceName (node) {\n    if (!node.isWorkspace)\n      return node.name\n\n    const humanOutput =\n      !this.npm.config.get('json') && !this.npm.config.get('parseable')\n\n    const workspaceName =\n      humanOutput\n        ? node.pkgid\n        : node.name\n\n    return this.npm.color && humanOutput\n      ? color.green(workspaceName)\n      : workspaceName\n  }\n\n  // formatting functions\n  makePretty (dep) {\n    const {\n      current = 'MISSING',\n      location = '-',\n      homepage = '',\n      name,\n      wanted,\n      latest,\n      type,\n      dependent,\n    } = dep\n\n    const columns = [name, current, wanted, latest, location, dependent]\n\n    if (this.npm.config.get('long')) {\n      columns[6] = type\n      columns[7] = homepage\n    }\n\n    if (this.npm.color) {\n      columns[0] = color[current === wanted ? 'yellow' : 'red'](columns[0]) // current\n      columns[2] = color.green(columns[2]) // wanted\n      columns[3] = color.magenta(columns[3]) // latest\n    }\n\n    return columns\n  }\n\n  // --parseable creates output like this:\n  // <fullpath>:<name@wanted>:<name@installed>:<name@latest>:<dependedby>\n  makeParseable (list) {\n    return list.map(dep => {\n      const {\n        name,\n        current,\n        wanted,\n        latest,\n        path,\n        dependent,\n        type,\n        homepage,\n      } = dep\n      const out = [\n        path,\n        name + '@' + wanted,\n        current ? (name + '@' + current) : 'MISSING',\n        name + '@' + latest,\n        dependent,\n      ]\n      if (this.npm.config.get('long'))\n        out.push(type, homepage)\n\n      return out.join(':')\n    }).join(os.EOL)\n  }\n\n  makeJSON (list) {\n    const out = {}\n    list.forEach(dep => {\n      const {\n        name,\n        current,\n        wanted,\n        latest,\n        path,\n        type,\n        dependent,\n        homepage,\n      } = dep\n      out[name] = {\n        current,\n        wanted,\n        latest,\n        dependent,\n        location: path,\n      }\n      if (this.npm.config.get('long')) {\n        out[name].type = type\n        out[name].homepage = homepage\n      }\n    })\n    return JSON.stringify(out, null, 2)\n  }\n}\nmodule.exports = Outdated\n"]},"metadata":{},"sourceType":"script"}